{"version":3,"sources":["jquery.contextMenuRtl.js"],"names":["factory","define","amd","exports","require","jQuery","$","splitAccesskey","val","k","t","split","keys","i","charAt","toUpperCase","push","handle","contextMenu","types","op","create","opt","root","createNameNode","item","$name","_accesskey","_beforeAccesskey","append","document","createTextNode","addClass","text","appendTo","_afterAccesskey","isHtmlName","accesskey","Error","html","name","undefined","$menu","className","data","contextMenuRoot","each","accesskeys","items","key","$t","$label","$input","on","noop","type","$node","contextMenuKey","ak","aks","matched","match","RegExp","call","commands","isFunction","callback","callbacks","classNames","notSelectable","hasTypes","inputs","attr","value","height","prop","selected","prependTo","radio","options","focusInput","blurInput","events","icon","_icon","this","substring","support","eventSelectstart","abortevent","css","rtl","body","defaults","positionSubmenu","ui","position","my","at","of","collision","offset","top","left","outerWidth","focusItem","e","stopPropagation","$this","hasClass","disabled","hover","visible","join","parent","find","not","removeClass","filter","trigger","$selected"],"mappings":"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","file":"jquery.contextMenuRtl.min.js","sourcesContent":["/**\n * @preserve\n * jQuery contextMenuRtl v0.1.0 - rtl Plugin for contextMenu (http://swisnl.github.io/jQuery-contextMenu/) plugin\n *\n * Version: v0.1.0\n *\n * Authors: Avi Meslati\n * Web: http://github.com/avim101/jQuery-contextMenuRtl\n *\n * Copyright (c) 2016 Avi Meslati\n *\n * Licensed under\n *   MIT License http://www.opensource.org/licenses/mit-license\n *   GPL v3 http://opensource.org/licenses/GPL-3.0\n *\n * Date: 2016-06-16 15:42:56\n */\n\n'use strict';\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as anonymous module.\n    define(['jquery'], factory);\n  } else if (typeof exports === 'object') {\n    // Node / CommonJS\n    factory(require('jquery'));\n  } else {\n    // Browser globals.\n    factory(jQuery);\n  }\n})(function ($) {\n  var handle = $.contextMenu.handle,\n    types = $.contextMenu.types,\n    op = $.contextMenu.op;\n\n  // split accesskey according to http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html#assigned-access-key\n  function splitAccesskey(val) {\n    var t = val.split(/\\s+/),\n      keys = [];\n\n    for (var i = 0, k; k = t[i]; i++) {\n      k = k.charAt(0).toUpperCase(); // first character only\n      // theoretically non-accessible characters should be ignored, but different systems, different keyboard layouts, ... screw it.\n      // a map to look up already used access keys would be nice\n      keys.push(k);\n    }\n\n    return keys;\n  }\n  // find <label for=\"xyz\">\n  function inputLabel(node) {\n    return (node.id && $('label[for=\"' + node.id + '\"]').val()) || node.name;\n  }\n// convert <menu> to items object\n  function menuChildren(items, $children, counter) {\n    if (!counter) {\n      counter = 0;\n    }\n\n    $children.each(function () {\n      var $node = $(this),\n        node = this,\n        nodeName = this.nodeName.toLowerCase(),\n        label,\n        item;\n\n      // extract <label><input>\n      if (nodeName === 'label' && $node.find('input, textarea, select').length) {\n        label = $node.text();\n        $node = $node.children().first();\n        node = $node.get(0);\n        nodeName = node.nodeName.toLowerCase();\n      }\n\n      /*\n       * <menu> accepts flow-content as children. that means <embed>, <canvas> and such are valid menu items.\n       * Not being the sadistic kind, $.contextMenu only accepts:\n       * <command>, <menuitem>, <hr>, <span>, <p> <input [text, radio, checkbox]>, <textarea>, <select> and of course <menu>.\n       * Everything else will be imported as an html node, which is not interfaced with contextMenu.\n       */\n\n      // http://www.whatwg.org/specs/web-apps/current-work/multipage/commands.html#concept-command\n      switch (nodeName) {\n        // http://www.whatwg.org/specs/web-apps/current-work/multipage/interactive-elements.html#the-menu-element\n        case 'menu':\n          item = {name: $node.attr('label'), items: {}};\n          counter = menuChildren(item.items, $node.children(), counter);\n          break;\n\n        // http://www.whatwg.org/specs/web-apps/current-work/multipage/commands.html#using-the-a-element-to-define-a-command\n        case 'a':\n        // http://www.whatwg.org/specs/web-apps/current-work/multipage/commands.html#using-the-button-element-to-define-a-command\n        case 'button':\n          item = {\n            name: $node.text(),\n            disabled: !!$node.attr('disabled'),\n            callback: (function () {\n              return function () {\n                $node.click();\n              };\n            })()\n          };\n          break;\n\n        // http://www.whatwg.org/specs/web-apps/current-work/multipage/commands.html#using-the-command-element-to-define-a-command\n\n        case 'menuitem':\n        case 'command':\n          switch ($node.attr('type')) {\n            case undefined:\n            case 'command':\n            case 'menuitem':\n              item = {\n                name: $node.attr('label'),\n                disabled: !!$node.attr('disabled'),\n                icon: $node.attr('icon'),\n                callback: (function () {\n                  return function () {\n                    $node.click();\n                  };\n                })()\n              };\n              break;\n\n            case 'checkbox':\n              item = {\n                type: 'checkbox',\n                disabled: !!$node.attr('disabled'),\n                name: $node.attr('label'),\n                selected: !!$node.attr('checked')\n              };\n              break;\n            case 'radio':\n              item = {\n                type: 'radio',\n                disabled: !!$node.attr('disabled'),\n                name: $node.attr('label'),\n                radio: $node.attr('radiogroup'),\n                value: $node.attr('id'),\n                selected: !!$node.attr('checked')\n              };\n              break;\n\n            default:\n              item = undefined;\n          }\n          break;\n\n        case 'hr':\n          item = '-------';\n          break;\n\n        case 'input':\n          switch ($node.attr('type')) {\n            case 'text':\n              item = {\n                type: 'text',\n                name: label || inputLabel(node),\n                disabled: !!$node.attr('disabled'),\n                value: $node.val()\n              };\n              break;\n\n            case 'checkbox':\n              item = {\n                type: 'checkbox',\n                name: label || inputLabel(node),\n                disabled: !!$node.attr('disabled'),\n                selected: !!$node.attr('checked')\n              };\n              break;\n\n            case 'radio':\n              item = {\n                type: 'radio',\n                name: label || inputLabel(node),\n                disabled: !!$node.attr('disabled'),\n                radio: !!$node.attr('name'),\n                value: $node.val(),\n                selected: !!$node.attr('checked')\n              };\n              break;\n\n            default:\n              item = undefined;\n              break;\n          }\n          break;\n\n        case 'select':\n          item = {\n            type: 'select',\n            name: label || inputLabel(node),\n            disabled: !!$node.attr('disabled'),\n            selected: $node.val(),\n            options: {}\n          };\n          $node.children().each(function () {\n            item.options[this.value] = $(this).text();\n          });\n          break;\n\n        case 'textarea':\n          item = {\n            type: 'textarea',\n            name: label || inputLabel(node),\n            disabled: !!$node.attr('disabled'),\n            value: $node.val()\n          };\n          break;\n\n        case 'label':\n          break;\n\n        default:\n          item = {type: 'html', html: $node.clone(true)};\n          break;\n      }\n\n      if (item) {\n        counter++;\n        items['key' + counter] = item;\n      }\n    });\n\n    return counter;\n  }\n\n  $.contextMenu.op.create = function (opt, root) {\n    if (root === undefined) {\n      root = opt;\n    }\n    // create contextMenu\n    opt.$menu = $('<ul class=\"context-menu-list\"></ul>').addClass(opt.className || '').data({\n      'contextMenu': opt,\n      'contextMenuRoot': root\n    });\n\n    $.each(['callbacks', 'commands', 'inputs'], function (i, k) {\n      opt[k] = {};\n      if (!root[k]) {\n        root[k] = {};\n      }\n    });\n\n    if(!root.accesskeys){\n      root.accesskeys = {};\n    }\n\n    function createNameNode(item) {\n      var $name = $('<span></span>');\n      if (item._accesskey) {\n        if (item._beforeAccesskey) {\n          $name.append(document.createTextNode(item._beforeAccesskey));\n        }\n        $('<span></span>')\n          .addClass('context-menu-accesskey')\n          .text(item._accesskey)\n          .appendTo($name);\n        if (item._afterAccesskey) {\n          $name.append(document.createTextNode(item._afterAccesskey));\n        }\n      } else {\n        if (item.isHtmlName) {\n          // restrict use with access keys\n          if (typeof item.accesskey !== 'undefined') {\n            throw new Error('accesskeys are not compatible with HTML names and cannot be used together in the same item');\n          }\n          $name.html(item.name);\n        } else {\n          $name.text(item.name);\n        }\n      }\n      return $name;\n    }\n\n    // create contextMenu items\n    $.each(opt.items, function (key, item) {\n      var $t = $('<li class=\"context-menu-item\"></li>').addClass(item.className || ''),\n        $label = null,\n        $input = null;\n\n      // iOS needs to see a click-event bound to an element to actually\n      // have the TouchEvents infrastructure trigger the click event\n      $t.on('click', $.noop);\n\n      // Make old school string seperator a real item so checks wont be\n      // akward later.\n      if (typeof item === 'string') {\n        item = { type : 'cm_seperator' };\n      }\n\n      item.$node = $t.data({\n        'contextMenu': opt,\n        'contextMenuRoot': root,\n        'contextMenuKey': key\n      });\n\n      // register accesskey\n      // NOTE: the accesskey attribute should be applicable to any element, but Safari5 and Chrome13 still can't do that\n      if (typeof item.accesskey !== 'undefined') {\n        var aks = splitAccesskey(item.accesskey);\n        for (var i = 0, ak; ak = aks[i]; i++) {\n          if (!root.accesskeys[ak]) {\n            root.accesskeys[ak] = item;\n            var matched = item.name.match(new RegExp('^(.*?)(' + ak + ')(.*)$', 'i'));\n            if (matched) {\n              item._beforeAccesskey = matched[1];\n              item._accesskey = matched[2];\n              item._afterAccesskey = matched[3];\n            }\n            break;\n          }\n        }\n      }\n\n      if (item.type && types[item.type]) {\n        // run custom type handler\n        types[item.type].call($t, item, opt, root);\n        // register commands\n        $.each([opt, root], function (i, k) {\n          k.commands[key] = item;\n          if ($.isFunction(item.callback)) {\n            k.callbacks[key] = item.callback;\n          }\n        });\n      } else {\n        // add label for input\n        if (item.type === 'cm_seperator') {\n          $t.addClass('context-menu-separator ' + root.classNames.notSelectable);\n        } else if (item.type === 'html') {\n          $t.addClass('context-menu-html ' + root.classNames.notSelectable);\n        } else if (item.type) {\n          $label = $('<label></label>').appendTo($t);\n          createNameNode(item).appendTo($label);\n\n          $t.addClass('context-menu-input');\n          opt.hasTypes = true;\n          $.each([opt, root], function (i, k) {\n            k.commands[key] = item;\n            k.inputs[key] = item;\n          });\n        } else if (item.items) {\n          item.type = 'sub';\n        }\n\n        switch (item.type) {\n          case 'cm_seperator':\n            break;\n\n          case 'text':\n            $input = $('<input type=\"text\" value=\"1\" name=\"\" value=\"\">')\n              .attr('name', 'context-menu-input-' + key)\n              .val(item.value || '')\n              .appendTo($label);\n            break;\n\n          case 'textarea':\n            $input = $('<textarea name=\"\"></textarea>')\n              .attr('name', 'context-menu-input-' + key)\n              .val(item.value || '')\n              .appendTo($label);\n\n            if (item.height) {\n              $input.height(item.height);\n            }\n            break;\n\n          case 'checkbox':\n            $input = $('<input type=\"checkbox\" value=\"1\" name=\"\" value=\"\">')\n              .attr('name', 'context-menu-input-' + key)\n              .val(item.value || '')\n              .prop('checked', !!item.selected)\n              .prependTo($label);\n            break;\n\n          case 'radio':\n            $input = $('<input type=\"radio\" value=\"1\" name=\"\" value=\"\">')\n              .attr('name', 'context-menu-input-' + item.radio)\n              .val(item.value || '')\n              .prop('checked', !!item.selected)\n              .prependTo($label);\n            break;\n\n          case 'select':\n            $input = $('<select name=\"\">')\n              .attr('name', 'context-menu-input-' + key)\n              .appendTo($label);\n            if (item.options) {\n              $.each(item.options, function (value, text) {\n                $('<option></option>').val(value).text(text).appendTo($input);\n              });\n              $input.val(item.selected);\n            }\n            break;\n\n          case 'sub':\n            createNameNode(item).appendTo($t);\n\n            item.appendTo = item.$node;\n            op.create(item, root);\n            $t.data('contextMenu', item).addClass('context-menu-submenu');\n            item.callback = null;\n            break;\n\n          case 'html':\n            $(item.html).appendTo($t);\n            break;\n\n          default:\n            $.each([opt, root], function (i, k) {\n              k.commands[key] = item;\n              if ($.isFunction(item.callback)) {\n                k.callbacks[key] = item.callback;\n              }\n            });\n            createNameNode(item).appendTo($t);\n            break;\n        }\n\n        // disable key listener in <input>\n        if (item.type && item.type !== 'sub' && item.type !== 'html' && item.type !== 'cm_seperator') {\n          $input\n            .on('focus', handle.focusInput)\n            .on('blur', handle.blurInput);\n\n          if (item.events) {\n            $input.on(item.events, opt);\n          }\n        }\n\n        // add icons\n        if (item.icon) {\n          if ($.isFunction(item.icon)) {\n            item._icon = item.icon.call(this, this, $t, key, item);\n          } else {\n            if ( typeof(item.icon) === 'string' && item.icon.substring(0,3) == 'fa-' ) {\n              // to enable font awesome\n              item._icon = root.classNames.icon + ' ' + root.classNames.icon + '--fa fa ' + item.icon;\n            } else {\n              item._icon = root.classNames.icon + ' ' + root.classNames.icon + '-' + item.icon;\n            }\n          }\n          $t.addClass(item._icon);\n        }\n      }\n\n      // cache contained elements\n      item.$input = $input;\n      item.$label = $label;\n\n      // attach item to menu\n      $t.appendTo(opt.$menu);\n\n      // Disable text selection\n      if (!opt.hasTypes && $.support.eventSelectstart) {\n        // browsers support user-select: none,\n        // IE has a special event for text-selection\n        // browsers supporting neither will not be preventing text-selection\n        $t.on('selectstart.disableTextSelect', handle.abortevent);\n      }\n    });\n    // attach contextMenu to <body> (to bypass any possible overflow:hidden issues on parents of the trigger element)\n    if (!opt.$node) {\n      opt.$menu.css('display', 'none').addClass('context-menu-root');\n      //if opt rtl is true attach dir=\"rtl\" for styling\n      if(opt.rtl && opt.rtl === true){\n        opt.$menu.attr(\"dir\",\"rtl\");\n      }\n    }\n    opt.$menu.appendTo(opt.appendTo || document.body);\n  };\n  $.contextMenu.defaults.positionSubmenu = function ($menu,rtl) {\n    if ($.ui && $.ui.position) {\n      // .position() is provided as a jQuery UI utility\n      // (...and it won't work on hidden elements)\n      //if rtl is true opn sub menu from right to left\n      $menu.css('display', 'block').position({\n        my: rtl === true ? 'right top' : 'left top',\n        at: rtl === true ? 'left top' : 'right top',\n        of: this,\n        collision: 'flipfit fit'\n      }).css('display', '');\n    } else {\n      // determine contextMenu position\n      var offset = {\n        top: 0,\n        left: this.outerWidth()\n      };\n      $menu.css(offset);\n    }\n  };\n  $.contextMenu.handle.focusItem = function (e) {\n    e.stopPropagation();\n    var $this = $(this),\n      data = $this.data(),\n      opt = data.contextMenu,\n      root = data.contextMenuRoot;\n    // console.log(opt);\n\n    if ($this.hasClass(root.classNames.disabled) || $this.hasClass(root.classNames.notSelectable)) {\n      return;\n    }\n\n    $this\n      .addClass([root.classNames.hover, root.classNames.visible].join(' '))\n      // select other items and included items\n      .parent().find('.context-menu-item').not($this)\n      .removeClass(root.classNames.visible)\n      .filter('.' + root.classNames.hover)\n      .trigger('contextmenu:blur');\n\n    // remember selected\n    opt.$selected = root.$selected = $this;\n\n    // position sub-menu - do after show so dumb $.ui.position can keep up\n    if (opt.$node) {\n      root.positionSubmenu.call(opt.$node, opt.$menu, root.rtl);\n    }\n  };\n});\n"],"sourceRoot":"/source/"}